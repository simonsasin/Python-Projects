SIMON SASIN WEEK 7 PROGRAMMING ASSIGNMENTS
EXERCISE  1:
First program:
################
# Author: Simon Sasin
# Date: 10/27/2019
# This program writes a series of random numbers to a file based
# off of user inputted number of random numbers
#################

#import random number library
import random


#define main function
def main():

    amount = int(input('Enter the number of random numbers to be written to the file: '))

    #create file for random numbers to be filled into
    num_file = open('rand_numbers.txt', 'w')
    
    #for loop for filling in random number file
    for x in range(1,amount+1):
        num = random.randint(1,500)
        num_file.write(str(num) + '\n')

    num_file.close()

main()
    
    


Second program:
################

# Author: Simon Sasin
# Date: 10/27/2019
# This program reads the random numbers fromthe file I created, displays the numbers,
# and the total and number of random numbers read
#################
#defining main function
def main():

    #retrieve contents from rand_numbers file
    num_file=open('rand_numbers.txt','r')
    #read first line of file
    num = num_file.readline()
    total = 0
    count = 0
    

    print('Numbers present in rand_numbers.txt file: ')
    #loop to iterate through all numbers in file
    while num !='':
        num = num.rstrip('\n')
        print(num)
        add = num
        total = total + int(add)
        num = num_file.readline()
        count += 1

    num_file.close()

    #print final outputs
    print('\nTotal: ', total)
    print(str(count) + ' numbers were read from the file.')

main()



EXERCISE 2:
#################
# Author: Simon Sasin   
# Date: 10/27/2019
# This program calculates the average steps taken per month from a steps.txt file
#################
def main():
    #read step.txt file
    days_file = open('steps.txt', 'r')
    #establish arrays for days in each month and for names of each month
    days_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    month_1 = ['January','February','March','April','May','June','July','August','September','October','November','December']

    #convert all strings from .txt files to ints to be workable in for loop
    steps = days_file.readlines()
    steps = list(map(int,steps))
    days_file.close()
    
    range1 = 0
    range2 = 0
    #for loop to calculate average steps for each month
    for month in range(0,12):
        range2 = range1 + days_month[month]
        month_total = steps[range1:range2]
        days = len(month_total)
        
        avg = sum(month_total)/int(days)
        print('The average steps taken in ' + str(month_1[month]) + ' was ' + '{:.1f}'.format(avg))
        range1 = range2

main()



EXERCISE 3	
################
# Author: Simon Sasin
# Date: 10/27/2019
# This program takes user input of sentence of words and converts it to pig latin in
# all caps
#################
#define main function
def main():
    #take user input of string
    phrase = input('Enter a string: ')
    phrase = phrase.split()
    
    phrase_out = ''
    #for loop iterates through each word in the user inputted sentence
    for count in range(0,len(phrase)):
        word = phrase[count]
        #for 1 letter words translation
        if len(word) == 1:
            word = word + 'ay '
        #conditional for larger words translation
        else: 
            word = phrase[count]
            first = word[0]
            word = word.replace(first,' ')
            a = ' ' 
            for x in range(0, len(word)):
                if word[x-1] != a and word[x] == a:
                    word = word + first + 'ay '

        #concatenate entire phrase for final output
        phrase_out += word
        phrase_out = phrase_out.upper()

    print(phrase_out)

main()

EXERCISE 4
################
# Author: Simon Sasin
# Date: 10/27/2019
# This program 
#*unfinished*
#################

def main():
    pop_file = open('USPopulation.txt','r')
    pop = list(map(int,pop_file))
    pop_file.close()
    pop_change = [0 for i in range(len(pop)-1)]
   
    
    x = 0
    change = 0
    total_change = 0
    for x in range(0,len(pop)-1):
        line1 = pop[x]
        line2 = pop[x+1]
        change = int(line2) - int(line1)
        pop_change[x] = change
        total_change += change
        


    max_pop = max(pop_change)
    min_pop = min(pop_change)
    avg = total_change/len(pop)

    
    print(pop_change)
    print(str(avg))
    print(max_pop)
    print(min_pop)
main()


